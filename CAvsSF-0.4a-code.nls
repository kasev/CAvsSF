;; coded in netologo v5.3.1.
;; v0.4a (from 0.3.2.)
;;        - major reimplementation of the model
;;        - end of subpopulations, end of types of agents
;;        - agents have strategies of behavior, can think, i.e. try to optimize their behavior (followers) and act
;;             - three reactions on experience (none-superchaotic, none-superstable, optmizing)
;;        - there is constant ratio of strategies [parameter] in population, but agents get a random strategy each tick
;;        - strategy is a strategy for "happinness", answer on a question how to be act to be happy
;;        - QUIRK :  the satisfaction is population based and is constant in the ratio of unhappy (changers - innovators), happy (non-changers - traditionalist) and context-based happy (follow)

;;???     - follower strategy is evaluated "at once", not follower after follower : will it significantly change the dynamics of the model?
;;        minor tweaks
;;          - deleted button and functionality "balance traditionalists"
;; 
;; v0.3.2 - better visualisation of the selection dynamics 
;;      - explorative visualisation of (part of) ego-network of one random agent (chosenOne)


;; general description
;; - distribution of agents to sites due to their strategies
;;   - headless-goers randomly, traditionalist go to last place, rest follow  by deciding algorithm
;; - there is fixed ratio (50% to 50%) of different ritual sites


turtles-own [ ;; as people
  visiting-site ;; site I am in (redundant, same as patch-at)
  strategy;; strategy to be satisfied I use  "","h","t","f"  "no strategy", "headless", "traditional", "follow" 
  site-evaluation ;; social evaluation, list of marks
  wish-to-visit;;
  
  ;; EM = encounter memory
  EM-people-met  ;;  list of agentsets - agents from last encounter on ritual site, on 0 is list with last encounter
  EM-place-visited;;  list of agentsets - visited patches, on 0 is the last visited patch
  EM-used-strategies;; list of used strategies
  EM-used-site-evaluation;; list of used social evaluations of sites (marking of ritual site at tick before decision was made; relevant for follow strategy) 

  my-last-place ;; last place agent visited
  my-last-encountered-quality;; last quality agent has encountered
  my-last-strategy;; my last used way of behavior
  
  chosenOne;;  special variable
  last-caffinity; ;;debug variable
]


links-own [
  EM-met ;; list of 0s and 1s; 1 = we have met in the tick, 0 = we have NOT met in the tick
]

patches-own [ ;; as ritual sites
  site-quality ;; "SF" or "CA"
  site-mark ;; evaluation of ritual site by agent, used in deciding algoritm (rewritten by each agent deciding process)
]

to make-movie   ;;; works fine. It is based on the movie-example from model library.
  user-message "First, save your new movie file (choose a name ending with .mov)"
  let path user-new-file
  if not is-string? path [ stop ]  ;; stop if user canceled
  setup
  movie-start path
  movie-set-frame-rate 5
  movie-grab-interface
  repeat 50
    [ go
      movie-grab-interface ]
  movie-close
  user-message (word "Exported movie to " path)
end


to setup
  clear-all
  globals-init
  
  ;;reporting variables initialisation
  set max-pop-per-site 0 ;; maximal population in one site, which the model produced
  set state-of-world n-values num-sites [0] ;; initialisation of list of participant-counts from ritual-sites

  ask patches [
   set site-quality ""
  ]
  set ritual-sites patches with [ritual-site?] ;; create n ritual sites from num-sites patches / code originally from "Party model" of Wilensky, U. (1997).
  set-default-shape turtles "person"
  set home-site patch 0 5 ;; define a home-site patch; place where agents are, when they are not in one of ritual-sites


  ;;distributing site-quality, half first quality, other half second quality
  let sorted-ritual-sites sort-on [pxcor] ritual-sites
  let counter 0
  let half floor(num-sites / 2)
  foreach sorted-ritual-sites [
    set counter (counter + 1)
    ifelse (half >= counter)[
       ask ? [
       set site-quality "SF"
       set plabel-color yellow]
      ][
      ask ? [
      set site-quality "CA"
      set plabel-color red]
    ]

  ]

  ;; creating population of agents
  create-turtles population-size / 2 [
    set size 3
    set color white
    set visiting-site one-of ritual-sites with [site-quality = "SF"] ;; randomly visit on of the ritual places with prosocial quality
    move-to visiting-site
    ;;initiatlize turtle variables
    set strategy ""
    set site-evaluation []
    set EM-people-met []
    set EM-place-visited []
    set EM-used-strategies []
    set EM-used-site-evaluation []
    ;;set hidden? true
  ]
  create-turtles population-size / 2 [
    set size 3
    set color white
    set visiting-site one-of ritual-sites with [site-quality = "CA"];; randomly visit on of the ritual places with cognitive quality
    move-to visiting-site
    ;;initiatlize turtle variables
    set strategy ""
    set site-evaluation []
    set EM-people-met []
    set EM-place-visited []
    set EM-used-strategies []
    set EM-used-site-evaluation []
    ;;set hidden? true
  ]



  update-memory ;; creates an initial memory
  ;;debug-move-to-random-patch
  update-labels-setup ;; updates labels of ritual sites
  ;;return-to-home
  
  visualize-participants
  
  ;; optional : study network of individual agents
  ;;if show-network-of-individual [
    ;; choose chosenOne
  ;;  ask one-of turtles [ set chosenOne True set shape "star" set color red set size 6]
  ;;]
  
  
  reset-ticks
  
  ;;FOR EXPORT to VIDEO
  ;;export-interface (word "vexport/4/frame" but-first (word (100000 + ticks)) ".png")
  ;;export-world (word "wexport/1/tick" but-first (word (100000 + ticks)) ".dat")
end

;;*********************************
to go
  return-to-home
  
  ritual-activity
  update-memory
  update-labels-go
  
  visualize-participants
  update-links
  
  ;;FOR EXPORT to VIDEO
  ;;export-interface (word "vexport/4/frame" but-first (word (100000 + ticks)) ".png")
  ;;export-world (word "wexport/1/tick" but-first (word (100000 + ticks)) ".dat")
  
  tick
  
end



;;****************************************************************************************
;;****************************************************************************************
;; main procedure for distribution of agents to sites in each tick
;; has three parts:
;;   1) distribute strategies according to global parameter [there is constant distribution of satisfaction in population]
;;   2) evaluate and act the simple strategies (headless, traditional)
;;   3) evaluate complex strategies (follow)
;;   4) act the complex strategy (follow)
to ritual-activity

  ;; reporting variables
  set prosocialEffectUsage 0
  set nonsocialEffectUsage 0

  ;;***************************************  1 *******************************************
  distribute-strategies
  
  
  ;;***************************************  2 *******************************************
  ask turtles with [strategy = "h"] [
    ;;think-headless self    
    act-headless self
  ]
  ;;reporting variables
  set r-head ca-site-visitors-count?
  set y-head sf-site-visitors-count?
  
  ask turtles with [strategy = "t"] [
    ;;think-traditional self    
    act-traditional self    
  ]
  ;;reporting variables
  set r-tradi ca-site-visitors-count? - r-head
  set y-tradi sf-site-visitors-count? - y-head
  
  ;;***************************************  3 *******************************************
  ;; creates evaluation of sites for decision making
  ask turtles with [strategy = "f"] [
    think-follow self
    ;;act-follow self
  ]
  
  ;;***************************************  4 *******************************************
  ;; acts upon evalutation
  ask turtles with [strategy = "f"] [
    act-follow self
  ]
 
end

;;************************************
to distribute-strategies
  let headless n-of floor((percentage-of-headless-inovators / 100) * population-size) turtles
  let traditional n-of floor((percentage-of-traditionalists / 100) * population-size) turtles with [not member? self headless]
  
  ask headless [
    set strategy "h"
    set color orange
  ]  
  ask traditional [
    set strategy "t"
    set color blue
  ]

  ;;for rest of agents set strategy to complex strategy "follow"
  ask turtles with [strategy = ""] [    
    set strategy "f"
    set color white
  ]
end

;;************************************
;; THINKING STRATEGIES
;;************************************
;;functions for strategies
to think-headless [agent] 
  ask agent [
    ;;nothing
    set site-evaluation 0
  ]
end

to think-traditional [agent] 
  ask agent [
    ;;nothing
    set site-evaluation 0
  ]
end


to think-follow [agent] 
  
  ;; evaluate present moment vs past (which site offers the best experience according to memory) 
  ask agent [
     let deciding-agent self
     let da-EM-people-met EM-people-met         ;; go to your memory of others
     let da-EM-place-visited EM-place-visited   ;; go to your memory of sites
     let da-se site-evaluation
  
     ;; constraining social memory to a limit defined by global variable - social-memory-capacity
     ;; takes into account the strenght of memory due its time distance from present
     let xposition 0 ;; encounter position in memory / list
     let social-sum 0
     let da-EM-people-met-constrained []
     
     
     ;;constraining has 2 dimensions governed by 2 parameters [memory-size],[social-memory-capacity]
     ;; 1) there is limit of depth of memory blocks (tick - encounter):  i.e. 5 [memory size] "RECENT X ticks is relevant"
         ;; realized in update-memory procedure
     ;; 2) there is limit of memory content, i.e.aka Dunbar limit [social memory capacity], "capacity of ego network"
     ;;   3) more recent memories are stronger > we distribute ego capacity to blocks of memory
     
     foreach da-EM-people-met [ ;; for each encounter(agentset of people agent has met) of full memory
       let agentset ?
       let acount count agentset
       let coefficient 0
       if (xposition = 0) [set coefficient 3]  ;; last memory has the greatest strength, i.e. people from last encounter take more capacity of memory
       if (xposition = 1) [set coefficient 2]
       if (xposition >= 2) [set coefficient 1]
       set social-sum  social-sum + (acount * coefficient)
       if (social-sum < social-memory-capacity) [
         set da-EM-people-met-constrained lput agentset da-EM-people-met-constrained
       ]
       set xposition xposition + 1
     ]
     ;; simplifing could go around
     ;; 1. not use social memory capacity, just memory size
     ;; or 2.  use SMC and MS, but not ranking according to the position of memory block (ie. recent memories are stronger)
     
  
     ;;marking ritual sites due to placed headless and traditionalists, which deciding agent remembers
     ask ritual-sites[
       let site-coefficient 0
       let visiting-people other turtles-here 
       let mark 0
       
       foreach da-EM-people-met-constrained [ ;; memories of deciding agent,
         let encounter ? ;; agentset from memory
         let mposition position encounter da-EM-people-met-constrained ;; position of agentset from memory

         let encounter-site item mposition da-EM-place-visited
         ask encounter-site [
           let encounter-site-quality site-quality
           if (encounter-site-quality = "SF")[
             set site-coefficient (1 + social-function-coeficient )
             set prosocialEffectUsage prosocialEffectUsage + 1
             ;;print (word "encounter memory coefficient change SF" ":" site-coefficient)
             ]
           if (encounter-site-quality = "CA")[
             set site-coefficient 1
             set nonsocialEffectUsage nonsocialEffectUsage + 1
             ;;print (word "encounter memory coefficient change CA" ":" site-coefficient)
             ]
         ]

         ask encounter [ ;; ask each agent in memorized encounter
           if (member? self visiting-people)[
             ifelse (fresher-reminiscence-matters-more) [set mark (mark + ((memory-size - mposition) * site-coefficient))]
             [ set mark (mark + (1 * site-coefficient)) ]
                        ]
         ]
       ]
       set site-mark mark         
     ]
     
     ;;modify the existing marks (and their order) due to cognitive attraction coeficient strenght and agents cognitive affinity, which is total CA site experience in his memory
     ;;counting deciding agent's affinity to CA quality
     let caffinity 1
     foreach da-EM-place-visited [
       let encounter ? ;; agentset from memory
       let encounter-quality ""
       ask ? [
         set encounter-quality site-quality
         ]
       let mposition position encounter da-EM-place-visited ;;
       if (encounter-quality = "CA") [
         set caffinity caffinity + (cognitive-attraction-coeficient * (memory-size - mposition))    ;; e.g.. 1 + 0.1 * 5  
       ]
     ]
     ;;if (caffinity > 1) [print (word "caffinity" caffinity)]

     ;;cognitive attraction influence = affinity to attractive site
     ask ritual-sites [
       if (site-quality = "CA") [
         set site-mark site-mark * caffinity
       ]
     ]
     
     
     ;;creates an schema of evalution 
     foreach sort-on [pxcor] ritual-sites [
       set da-se fput site-mark da-se
     ]
     
     ;;decide where to go
     ;;let choices sort-on [site-mark] ritual-sites with [count turtles-here < site-capacity] - USING SITE CAPACITY = OBSOLETE?
     let choices sort-on [site-mark] ritual-sites
     set wish-to-visit last choices
  
  ]
end

;;************************************
;; ACTING STRATEGIES
;;************************************

to act-headless [agent] 
  ask agent [
    move-to one-of ritual-sites
  ]
end

to act-traditional [agent] 
  ask agent [
    move-to my-last-place 
  ]
end

to act-follow [agent] 
  ask agent [
    move-to wish-to-visit   
  ]
end



;;*********************************
to visualize-participants  ;; move agents so they are visible in columns over the ritual-site patches
  ;; spread vertically
  
  ask turtles with [my-last-strategy = "f"] [   
    set heading   0
    fd 4                   ;; leave a gap
  while [any? other turtles-here] [
    if-else can-move? 2 [
      fd 1
    ]
    [ ;; else, if we reached the edge of the screen
      set xcor xcor - 1  ;; take a step to the left
      set ycor 0         ;; and move to the base a new stack
      fd 4
    ]
  ] 
  ]
  
  ask turtles with [my-last-strategy = "t"] [   
    set heading   0
    fd 4                   ;; leave a gap
  while [any? other turtles-here] [
    if-else can-move? 2 [
      fd 1
    ]
    [ ;; else, if we reached the edge of the screen
      set xcor xcor - 1  ;; take a step to the left
      set ycor 0         ;; and move to the base a new stack
      fd 4
    ]
  ] 
  ]
  
  ask turtles with [my-last-strategy = "h"] [   
    set heading   0
    fd 4                   ;; leave a gap
  while [any? other turtles-here] [
    if-else can-move? 2 [
      fd 1
    ]
    [ ;; else, if we reached the edge of the screen
      set xcor xcor - 1  ;; take a step to the left
      set ycor 0         ;; and move to the base a new stack
      fd 4
    ]
  ] 
  ]
  
  ask turtles with [my-last-strategy != "t" and my-last-strategy != "h" and my-last-strategy != "f" ] [   
    set heading   0
    fd 4                   ;; leave a gap
  while [any? other turtles-here] [
    if-else can-move? 2 [
      fd 1
    ]
    [ ;; else, if we reached the edge of the screen
      set xcor xcor - 1  ;; take a step to the left
      set ycor 0         ;; and move to the base a new stack
      fd 4
    ]
  ] 
  ]
  
end


;;*********************************
to update-memory ;; update memory of each agents according to people and place in encounter

  ask ritual-sites [
    let place self
    ask turtles-here [      

      let other-people other turtles-here
      set EM-people-met fput other-people EM-people-met
      set EM-place-visited fput place EM-place-visited
      set EM-used-strategies fput strategy EM-used-strategies
      set EM-used-site-evaluation fput site-evaluation EM-used-site-evaluation
      
      set my-last-place place
      set my-last-encountered-quality [site-quality] of place
      set my-last-strategy strategy

      ;;chosenOne code
      if (chosenOne = True) [         
                 update-agent-network self        
      ]      

      ;;forgetting
      if (length EM-people-met > memory-size) [ set EM-people-met but-last EM-people-met]
      if (length EM-place-visited > memory-size) [ set EM-place-visited but-last EM-place-visited]

    ]

    ;;reporting
    let pcount count turtles-here
    if (pcount > max-pop-per-site)[ set max-pop-per-site pcount]

  ]
  
end


;;*********************************
to update-agent-network [hero] 
  
  foreach EM-people-met [
   let round-people ? 
   
   ask round-people [
     create-link-with hero [
       set EM-met []
       set color green
     ]
     
     ;;adding meeting
     ask my-links [
       ;;set color green
       set EM-met fput ticks EM-met
     ]
     
   ]
    
  ]
  
  ;;adding non-meetings
  ask links [
    let last-memory first EM-met
    if (last-memory != ticks) [
      set EM-met fput 0 EM-met
    ] 
  ]
  
end


to-report take [n xs]
  report sublist xs 0 min list n (length xs)
end


to update-links
  
  ask links [
     let active-memory take memory-size EM-met
     let summ 0
     
     foreach active-memory [
       set summ summ + ?
       
     ]
     
     if (summ = 0)[
       set color black
     ] 

     ;; 11, 10, 9, 8, 7 :  /     45/5 = 9 >  delitelne peti tak je to full
     ;;55, 54, 53, 52, 51, 50 / 265/5=53
     ;; if x4 - x5 = 1
     ;;    x3 - x4 = 1
     ;;    x2 - x3 = 1
     ;;    x1 - x2 = 1
     ;; 

     if (summ > 0)[
       set color green
     ]
     if ((summ > 0) and (summ mod memory-size = 0))[
       set color red
     ]
 
  ]
    
end




;;*********************************
to return-to-home
  ask turtles [
    move-to home-site
    set visiting-site home-site
    set strategy ""
  ]
end


;;*********************************
to update-labels-setup
  let debug []
  ask ritual-sites [
    set plabel count turtles-here
  ]
  let rr sort-on [pxcor] ritual-sites
  foreach rr [
    let rsite ?
    ask rsite [
      if (debug-output) [print (word pxcor ":" pycor)]
      ]
    set debug lput (count turtles-on rsite) debug
  ]
  if (debug-output) [ print (word "setup" ":" debug)]
end

to update-labels-go
  let debug []
  set redones 0
  set yellowones 0

  ask ritual-sites [
    set plabel count turtles-here

    if (site-quality = "SF") [
      set yellowones yellowones + count turtles-here
      set yellowonesTotal yellowonesTotal + count turtles-here
      ]
    if (site-quality = "CA") [
      set redones redones + count turtles-here
      set redonesTotal redonesTotal + count turtles-here
      ]

  ]
  let rr sort-on [pxcor] ritual-sites
  foreach rr [
    let rsite ?
    set debug lput (count turtles-on rsite) debug
  ]
  if (debug-output) [print (word ticks ":" debug " after head:" after-headless-state-of-world " after trad:" after-traditionalists-state-of-world)]
  set state-of-world debug
end




;;**************************************** REPORT PROCEDURES ***********************************************

to-report report-network-to-csv [memory-depth]
  
  ask turtles [
    
  ]
  
end




to-report distribution-list?
  let dlist []
  let rr sort-on [pxcor] ritual-sites
  foreach rr [
    let rsite ?
    set dlist lput (count turtles-on rsite) dlist
  ]
  report dlist
end


to-report sf-site-visitors-count?
 let a 0
 ask ritual-sites with [site-quality = "SF"][
   set a a + (count turtles-here)
   ;;print a
   ;;print "AAA"
   ;;print count turtles-here
   ]
 report a
end

to-report ca-site-visitors-count?
 let a 0
 ask ritual-sites with [site-quality = "CA"][
   set a a + (count turtles-here)
   ]
 report a
end



;;*********************************
to-report ritual-site?  ;; patch procedure
  ;; if your pycor is 0 and your pxcor is where a group should be located,
  ;; then you're a group site.
  ;; In this model (0,0) is near the right edge, so pxcor is usually
  ;; negative.
  ;; first figure out how many patches apart the groups will be 
  let site-interval floor (world-width / num-sites)

  report
    ;; all group sites are in the middle row
    (pycor = 0) and
    ;; leave a right margin of one patch, for legibility
    (pxcor <= 0) and
    ;; the distance between groups must divide evenly into
    ;; our pxcor
    (pxcor mod site-interval = 0) and
    ;; finally, make sure we don't wind up with too many groups
    (floor ((- pxcor) / site-interval) < num-sites)
end


to-report max-pop-per-site?
  report max-pop-per-site
end

;;*********************************
;;*********************************

to debug-move-to-random-patch
  ask turtles [
    move-to one-of patches
  ]
end

